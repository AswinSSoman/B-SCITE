library(BBMMclusterEM)
kclust<-3 # number of clusters
n<-16 # number of variables
chi <- 1 # pseudocounts for the Beta prior
seed <- 100
nIterations <- 60
clustering <- clusterEM(binaryMatrix = t(binaryclusterdata), alpha = chi, kclust = kclust, seed = seed, nIterations = nIterations)
minaic <- clustering$testaic
goodseed <- clustering$iteration
newclustermembershipgood <- clustering$newclustermembershipgood
relativeweights <- clustering$relativeweights
library(BBMMclusterEM)
kclust<-3 # number of clusters
n<-16 # number of variables
source("./createdata.R") # generate some artifical data
chi <- 1 # pseudocounts for the Beta prior
seed <- 100
nIterations <- 60
clustering <- clusterEM(binaryMatrix = t(binaryclusterdata), alpha = chi, kclust = kclust, seed = seed, nIterations = nIterations)
library(BBMMclusterEM)
kclust<-3 # number of clusters
n<-16 # number of variables
source("./createdata.R") # generate some artifical data
chi <- 1 # pseudocounts for the Beta prior
seed <- 100
nIterations <- 60
clustering <- clusterEM(binaryMatrix = t(binaryclusterdata), alpha = chi, kclust = kclust, seed = seed, nIterations = nIterations)
minaic <- clustering$testaic
goodseed <- clustering$iteration
goodseed
seed <- 100
nIterations <- 10
clustering <- clusterEM(binaryMatrix = t(binaryclusterdata), alpha = chi, kclust = kclust, seed = seed, nIterations = nIterations)
minaic <- clustering$testaic
minaic
goodseed <- clustering$iteration
goodseed
clustering$newclustermembershipgood
clustsizes
library(BBMMclusterEM)
kclust<-3 # number of clusters
n<-16 # number of variables
source("./createdata.R") # generate some artifical data
chi <- 1 # pseudocounts for the Beta prior
seed <- 100
nIterations <- 10
clustering <- clusterEM(binaryMatrix = t(binaryclusterdata), alpha = chi, kclust = kclust, seed = seed, nIterations = nIterations)
minaic <- clustering$testaic
goodseed <- clustering$iteration
newclustermembershipgood <- clustering$newclustermembershipgood
relativeweights <- clustering$relativeweights
newclustermembershipgood
which(newclustermembershipgood==1)
length(which(newclustermembershipgood==1))
length(which(newclustermembershipgood==2))
length(which(newclustermembershipgood==3))
save(minaic,goodseed,newclustermembershipgood,
file=paste("./BMMclusterEMk",kclust,"chi",chi,"seed",seed,"its",nIterations,".RData",sep=""))
library(BBMMclusterEM)
kclust<-3 # number of clusters
n<-16 # number of variables
source("./createdata.R") # generate some artifical data
chi <- 1 # pseudocounts for the Beta prior
startseed <- 100
nIterations <- 10
clustering <- BBMMclusterEM(binaryMatrix = binaryclusterdata, chi = chi, kclust = 2, startseed = startseed, nIterations = nIterations)
args<-c("1.input")
datas = read.table(args[1], sep="\t", header=TRUE)/2
header <- colnames(datas)
library(VAFclusterEM)
datas
args<-"takesLong.txt"
datas = read.table(args[1], sep="\t", header=TRUE)/2
header <- colnames(datas)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
VAFclusterEM(datas,coverage,kclust=3,startseed = 100, nIterations = 10, verbose=FALSE)
VAFclusterEM(datas,coverage,kclust=3,startseed = 100, nIterations = 10, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=1,startseed = 100, nIterations = 10, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=2,startseed = 100, nIterations = 10, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=3,startseed = 100, nIterations = 10, verbose=TRUE)
args<-c(args,"takeslongout.txt")
tempy<-VAFclusterEM(datas,coverage,kclust=2,startseed = 100, nIterations = 10, verbose=TRUE)
ls(tempy)
tempy$newclustermembership
clusterAssignment<-tempy$newclustermembership
output <- as.data.frame(t(as.matrix(clusterAssignment)))
colnames(output) <- header
write.table(output, args[2], sep="\t", row.names=FALSE, col.names=TRUE, quote=FALSE)
#VAFclusterEM(datas,coverage,kclust=3,startseed = 100, nIterations = 100, verbose=TRUE)
log(1e4)
log(1e4/0.15)
log(1e5/0.15)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-100
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
# run a single example of the clustering, with fixed number of clusters:
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = nIterations, verbose=FALSE)
# if you start with far to many clusters, then some here end up identical or empty
VAFclusterEM(datas,coverage,kclust=8,startseed = startseed, nIterations = nIterations, verbose=FALSE)
# now try lots of different numbers of clusters
minK <- 1
maxK <- min(8,length(datas))
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
AICsearch
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100, verbose=TRUE)
maxK
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100, breakOnIncrease=FALSE, verbose=TRUE)
