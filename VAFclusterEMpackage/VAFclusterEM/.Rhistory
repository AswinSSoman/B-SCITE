datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
datas
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
datas
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
minK <- 1
maxK <- length(datas)
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 10)
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=2,startseed = startseed, nIterations = nIterations, verbose=TRUE)
minK <- 1
maxK <- length(datas)
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 10)
AICsearch
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = nIterations, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=4,startseed = startseed, nIterations = nIterations, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=10,startseed = startseed, nIterations = nIterations, verbose=TRUE)
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 10)
AICsearch$AIC
AICsearch[[1]]
AICsearch[[2]]
AICsearch[[3]]
VAFclusterEM(datas,coverage,kclust=10,startseed = startseed, nIterations = nIterations, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = nIterations, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = 100, verbose=TRUE)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = nIterations, verbose=FALSE)
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-10
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = nIterations, verbose=FALSE)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-100
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = nIterations, verbose=FALSE)
minK <- 1
maxK <- length(datas)
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
AICsearch
AICsearch[[]]$AIC
AICsearch[[1:5]]$AIC
AICsearch[[1]]$AIC
AICsearch[[2]]$AIC
AICsearch[[3]]$AIC
AICsearch[[4]]$AIC
AICsearch[[5]]$AIC
length(AICsearch)
for(ii in 1:length(AICsearch)){
print(AICsearch[[ii]]$AIC)
}
minK <- 1
maxK <- length(datas)
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
AICs<-rep(NA,length(AICsearch))
for(ii in 1:length(AICsearch)){
AICs[ii]<-AICsearch[[ii]]$AIC
}
print(AICs)
which.min(AICs)
AICsearch[[which.min(AICs)]]
VAFclusterEM(datas,coverage,kclust=8,startseed = startseed, nIterations = nIterations, verbose=FALSE)
AICsearch[[which.min(AICs)]]
library(VAFclusterEM)
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-100
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
# run a single example of the clustering, with fixed number of clusters:
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = nIterations, verbose=FALSE)
# if you start with far to many clusters, then some here end up identical or empty
VAFclusterEM(datas,coverage,kclust=8,startseed = startseed, nIterations = nIterations, verbose=FALSE)
# now try lots of different numbers of clusters
minK <- 1
maxK <- length(datas)
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
AICs<-rep(NA,length(AICsearch))
for(ii in 1:length(AICsearch)){
AICs[ii]<-AICsearch[[ii]]$AIC
}
print(AICs)
# select the final result with the best AIC
AICsearch[[which.min(AICs)]]
# in particular the final assignment of mutations to clusters is
AICsearch[[which.min(AICs)]]$newclustermembership
plot(datas)
kernel(datas)
kernal(datas)
kernel.density(datas)
kernal.density(datas)
density(datas)
plot(density(datas))
?VAFclusterEM
?bestAICsearch
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
coverage <- 1e4
kclust <- 3
VAFclusterEM(datas, coverage, kclust)
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
coverage <- 1e4
kclust <- 3
maxK <- 5
aicMatrix <- bestAICsearch(datas, minK = 2, maxK = maxK, coverage = coverage)
aicMatrix
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-100
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
# run a single example of the clustering, with fixed number of clusters:
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = nIterations, verbose=FALSE)
# if you start with far to many clusters, then some here end up identical or empty
VAFclusterEM(datas,coverage,kclust=8,startseed = startseed, nIterations = nIterations, verbose=FALSE)
# now try lots of different numbers of clusters
minK <- 1
maxK <- length(datas)
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
AICs<-rep(NA,length(AICsearch))
for(ii in 1:length(AICsearch)){
AICs[ii]<-AICsearch[[ii]]$AIC
}
print(AICs)
# select the final result with the best AIC
AICsearch[[which.min(AICs)]]
# in particular the final assignment of mutations to clusters is
AICsearch[[which.min(AICs)]]$newclustermembership
Rscript
R.home()
setwd("~/Desktop/VAFclusterEMpackage")
read.table("JackExample.txt")
read.table("JackExample.txt", sep="\t")
read.table("JackExample.txt", sep="\t",header=TRUE)
read.table("JackExample.txt", sep="\t",header=TRUE)
temp<-read.table("JackExample.txt", sep="\t",header=TRUE)
temp[1]
temp[2]
temp[3]
?write.table
#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)
datas = read.table(args[1], sep="\t", header=TRUE)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
minK <- 1
maxK <- length(datas)
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
AICs<-rep(NA,length(AICsearch))
for(ii in 1:length(AICsearch)){
AICs[ii]<-AICsearch[[ii]]$AIC
}
#print(AICs)
# in particular the final assignment of mutations to clusters is
clusterAssignment <- AICsearch[[which.min(AICs)]]$newclustermembership
clusterAssignment
as.matrix(clusterAssignment)
t(as.matrix(clusterAssignment))
library(VAFclusterEM)
setwd("~/Desktop/VAFclusterEMpackage")
args<-c("0.input","0.output")
datas = read.table(args[1], sep="\t", header=TRUE)
header <- colnames(datas)
datas
header
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
minK <- 1
maxK<-4
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
VAFclusterEM(datas,coverage,kclust=1,startseed = 100, nIterations = 100, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=2,startseed = 100, nIterations = 100, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=3,startseed = 100, nIterations = 100, verbose=TRUE)
library(VAFclusterEM)
args<-c("0.input","0.output")
datas = read.table(args[1], sep="\t", header=TRUE)
header <- colnames(datas)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
minK <- 1
maxK <- length(datas)
VAFclusterEM(datas,coverage,kclust=3,startseed = 100, nIterations = 100, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=3,startseed = 109, nIterations = 1, verbose=TRUE)
VAFclusterEM(datas,coverage,kclust=3,startseed = 108, nIterations = 1, verbose=TRUE)
library(VAFclusterEM)
args<-c("0.input","0.output")
datas = read.table(args[1], sep="\t", header=TRUE)
header <- colnames(datas)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
minK <- 1
maxK <- length(datas)
VAFclusterEM(datas,coverage,kclust=3,startseed = 108, nIterations = 1, verbose=TRUE)
library(VAFclusterEM)
args<-c("0.input","0.output")
datas = read.table(args[1], sep="\t", header=TRUE)
header <- colnames(datas)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
minK <- 1
maxK <- length(datas)
# in particular the final assignment of mutations to clusters is
clusterAssignment <- AICsearch[[which.min(AICs)]]$newclustermembership
output <- as.data.frame(t(as.matrix(clusterAssignment)))
colnames(output) <- header
write.table(output, args[2], sep="\t", row.names=FALSE, col.names=TRUE, quote=FALSE)
VAFclusterEM(datas,coverage,kclust=3,startseed = 108, nIterations = 1, verbose=TRUE)
library(VAFclusterEM)
args<-c("0.input","0.output")
datas = read.table(args[1], sep="\t", header=TRUE)
header <- colnames(datas)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
minK <- 1
maxK <- length(datas)
VAFclusterEM(datas,coverage,kclust=3,startseed = 108, nIterations = 1, verbose=TRUE)
library(VAFclusterEM)
args<-c("0.input","0.output")
datas = read.table(args[1], sep="\t", header=TRUE)
header <- colnames(datas)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
minK <- 1
maxK <- length(datas)
VAFclusterEM(datas,coverage,kclust=3,startseed = 100, nIterations = 100, verbose=TRUE)
maxK<-4
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
AICs<-rep(NA,length(AICsearch))
for(ii in 1:length(AICsearch)){
AICs[ii]<-AICsearch[[ii]]$AIC
}
print(AICs)
length(datas)
args<-c("0.input","0.output")
datas = read.table(args[1], sep="\t", header=TRUE)
header <- colnames(datas)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
minK <- 1
maxK <- min(8,length(datas)) # go up to 8 clusters
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
library(VAFclusterEM)
args<-c("0.input","0.output")
datas = read.table(args[1], sep="\t", header=TRUE)
header <- colnames(datas)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
minK <- 1
maxK <- min(8,length(datas)) # go up to 8 clusters
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100)
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100, verbose=TRUE)
AICs<-rep(NA,length(AICsearch))
for(ii in 1:length(AICsearch)){
AICs[ii]<-AICsearch[[ii]]$AIC
}
print(AICs)
datas
clusterAssignment <- AICsearch[[which.min(AICs)]]$newclustermembership
clusterAssignment
output <- as.data.frame(t(as.matrix(clusterAssignment)))
colnames(output) <- header
write.table(output, args[2], sep="\t", row.names=FALSE, col.names=TRUE, quote=FALSE)
library(VAFclusterEM)
library(VAFclusterEM)
library(VAFclusterEM)
?bestAICsearch
?VAFclusterEM
library(VAFclusterEM)
?VAFclusterEM
library(VAFclusterEM)
?VAFclusterEM
?bestAICsearch
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
coverage <- 1e4
kclust <- 3
maxK <- 5
aicMatrix <- bestAICsearch(datas, minK = 2, maxK = maxK, coverage = coverage)
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
coverage <- 1e4
kclust <- 3
maxK <- 5
aicMatrix <- bestAICsearch(datas, minK = 2, maxK = maxK, coverage = coverage)
aicMatrix
library(VAFclusterEM)
?bestAICsearch
coverage <- 1e4
kclust <- 3
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
maxK <- 5
aicMatrix <- bestAICsearch(datas, minK = 2, maxK = maxK, coverage = coverage)
coverage <- 1e4
kclust <- 3
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
VAFclusterEM(datas, coverage, kclust)
coverage <- 1e4
kclust <- 3
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
maxK <- 5
aicMatrix <- bestAICsearch(datas, minK = 2, maxK = maxK, coverage = coverage)
aicMatrix
?bestAICsearch
library(VAFclusterEM)
library(VAFclusterEM)
coverage <- 1e4 # coverage of data
startseed<-100
nIterations<-100
# create some data
freqs<-c(0.25,0.32,0.36)
nos <- c(5,3,1)
datas <- c()
for(ii in 1:length(nos)){
datas<-c(datas,rnorm(nos[ii],mean=freqs[ii],sd=VAFclusterEM:::sdfromcoverage(freqs[ii],coverage)))
}
# run a single example of the clustering, with fixed number of clusters:
VAFclusterEM(datas,coverage,kclust=3,startseed = startseed, nIterations = nIterations, verbose=FALSE)
minK <- 1
maxK <- min(8,length(datas))
AICsearch<-bestAICsearch(dataVec = datas, minK = minK, maxK = maxK, coverage = coverage, startseed = 100, nIterations = 100, breakOnIncrease=TRUE, verbose=TRUE)
AICsearch
library(VAFclusterEM)
?bestAICsearch
