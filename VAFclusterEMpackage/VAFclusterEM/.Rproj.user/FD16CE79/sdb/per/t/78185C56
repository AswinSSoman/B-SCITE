{
    "collab_server" : "",
    "contents" : "setwd('~/polybox/Students/Natalie/thomas')\nrm(list=ls())\n\n#Prepare mutation matrix\nmut.data <- read.table('raw.data/LIHC-TP.final_analysis_set.maf', sep='\\t', header=TRUE, stringsAsFactors=FALSE, quote=\"\", fill=TRUE)\nmut.data <- mut.data[,c('Hugo_Symbol', 'Variant_Classification', 'Tumor_Sample_Barcode')]\nmut.data <- mut.data[!(mut.data$Variant_Classification %in% c(\"Silent\",\"Intron\")),]\nmut.data <- mut.data[,-2]\n\nmut.genes <- unique(mut.data$Hugo_Symbol)\nmut.patients <- unique(mut.data$Tumor_Sample_Barcode)\n\nif (FALSE) {# Preprocess CNV data (intersectBed -a cnv.data.bed -b gene.regions.bed -wb)\n    cnv.data <- read.table(\"raw.data/LIHC.snp__genome_wide_snp_6__broad_mit_edu__Level_3__segmented_scna_minus_germline_cnv_hg19__seg.seg.txt\", header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE)\n    cnv.data <- cnv.data[abs(cnv.data$Segment_Mean) > 0.2 & cnv.data$Num_Probes > 10,] # doi: 10.1158/1541-7786.MCR-13-0614\n    cnv.data <- data.frame(cbind(cnv.data[,-1], \"Sample\"=cnv.data[,1]), stringsAsFactors = FALSE)\n    cnv.data <- cnv.data[order(cnv.data$Chromosome, cnv.data$Start),]\n    cnv.data$Chromosome <- paste('chr', cnv.data$Chromosome, sep = \"\")\n    write.table(cnv.data, \"raw.data/cnv.data.bed\", sep = \"\\t\", col.names = FALSE, row.names = FALSE, quote = FALSE)\n}\n\nlibrary(\"org.Hs.eg.db\")\ncnv.data <- read.table(\"raw.data/cnv.data.gene.bed\", sep = \"\\t\", header = FALSE, stringsAsFactors = FALSE)\ncnv.data <- cnv.data[,-c(7:9)]\ncolnames(cnv.data) <- c(\"chrom\",\"start\",\"end\",\"segs\",\"seg.mean\", \"id\",\"refseq\")\nsymbols <- select(x = org.Hs.eg.db, keys = cnv.data$refseq, columns = \"SYMBOL\", keytype = \"REFSEQ\")\ncnv.data <- data.frame(cbind(cnv.data, \"symbol\"=as.character(symbols$SYMBOL)), stringsAsFactors = FALSE)\ncnv.data <- cnv.data[grepl(\"^NM\", cnv.data$refseq) & grepl(\"^0\", substr(cnv.data$id, 14, 16)),]\ncnv.data$symbol <- factor(cnv.data$symbol)\n\n# Use TCGA stringent per-sample cutoffs to identify CNVs plus seg.mean > 0.2 and #probes > 10\ncnv.cutoff <- read.table(\"raw.data/sample_cutoffs.txt\", sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE)\n\nclean.cnv.data <- function(id, data, cnv.cutoff){\n    data.sub <- data[data$id == id,]\n    data.sub <- data.sub[data.sub$seg.mean < cnv.cutoff$Low[cnv.cutoff$Sample == id] | data.sub$seg.mean > cnv.cutoff$High[cnv.cutoff$Sample == id],]\n    return(data.sub)\n}\n\ncnv.data.clean <- sapply(cnv.cutoff$Sample, clean.cnv.data, cnv.data, cnv.cutoff, simplify = FALSE)\ncnv.data <- do.call(rbind, cnv.data.clean)\n\ncnv.patients <- unique(cnv.cutoff$Sample)\ncnv.genes <- unique(cnv.data$symbol)\n\nshort.id <- function(id) {\n    sapply(id, function(x) {substr(x, 1, 12)})\n}\n\npatients <- intersect(short.id(cnv.patients), short.id(mut.patients))\n\nmut.data <- mut.data[short.id(mut.data$Tumor_Sample_Barcode) %in% patients,]\ncolnames(mut.data) <- c(\"symbol\",\"id\")\ncnv.data <- cnv.data[short.id(cnv.data$id) %in% patients,]\n\ndata <- rbind(mut.data[,c(\"id\",\"symbol\")], cnv.data[,c(\"id\",\"symbol\")], stringsAsFactors = TRUE)\ndata$id <- short.id(data$id)\ngenes <- unique(data$symbol)\n\nbin.matrix <- sapply(genes, function(gene, patients, data) { patients %in% data$id[data$symbol == gene] }, patients, data)\nbin.matrix <- data.frame(bin.matrix, stringsAsFactors = FALSE)\nbin.matrix <- 1*bin.matrix\nrownames(bin.matrix) <- patients\n\nrm(clean.cnv.data, cnv.cutoff, cnv.data, cnv.data.clean, cnv.genes, cnv.patients, data, genes, mut.data, mut.genes, mut.patients, patients, short.id, symbols)\nsave.image(\"mut-cnv-matrix.rdata\")\n\n#mut.matrix <- sapply(mut.genes, function(gene, patients, data) { patients %in% data$Tumor_Sample_Barcode[data$Hugo_Symbol == gene] }, mut.patients, mut.data)\n#mut.matrix <- data.frame(mut.matrix, stringsAsFactors = FALSE)\n#mut.matrix <- 1*mut.matrix\n#rownames(mut.matrix) <- substr(mut.patients, 1, 12)\n\n\nmutation.freq <- colSums(bin.matrix)/nrow(bin.matrix)\n#Plot mutation frequency\npdf(\"figures/Mutation_CNV_frequency.pdf\", width = 10, height = 10)\nhist(mutation.freq[mutation.freq > 0.03], breaks = 20)\ndev.off()\n\ncolnames(bin.matrix[mutation.freq > 0.05])\n\nsub.matrix <- as.matrix(bin.matrix[,mutation.freq > 0.05])\n\n# Plot mutation frequency\npdf(\"figures/mutation-frequency.pdf\", width=10,height=10)\npar(mar=c(5.1, 9 ,4.1 ,2.1))\nmutation.freq <- mutation.freq[mutation.freq > 0.05]\nmutation.freq <- sort(mutation.freq, decreasing = TRUE)\nbarplot(mutation.freq[20:1], horiz = TRUE, cex.names = 1.5, las=2, col = 'darkblue', cex.axis = 1.5)\ndev.off()\n\n# timex\n#install.packages(\"~/Desktop/TiMEx_0.99.0.tar.gz\", repos = NULL, type = \"source\")\nlibrary(TiMEx)\n\nresultMutTcga <- TiMEx(sub.matrix, pairPvalue = 0.01, groupPvalue = 0.1)\nsave.image(\"timex-result.rdata\")\nload(\"timex-result.rdata\")\nplotGroupByNameColor <- function(group, mat, xlab=\"\") {\n    l <- length(group)\n    idx <- match(group, colnames(mat))\n    submatrix <- mat[, idx]\n    freqs <- round(apply(submatrix, 2, sum) * 100/dim(submatrix)[1], 2)\n    ord <- order(freqs, decreasing = TRUE)\n    submatrix <- submatrix[, ord]; group <- group[ord]; freqs <- freqs[ord]\n    mat2 <- submatrix[do.call(order,data.frame(submatrix)),]\n    image(t(mat2), col = c(\"white\", \"cornflowerblue\"), yaxt = \"n\", xaxt = \"n\", xlab=xlab, cex.lab=1.5, ylab=\"Samples\", line=0.5)\n    #mtext(side = 2, text = \"Samples\", line = 0.5)\n    #mtext(side = 1, text = xlab, line = 0.5)\n    axis(3, at = seq(from = 0, to = 1, length.out = l), lwd = 0, tck = 0, cex.axis = 1, labels = paste(group, \"\\n \", freqs, \" %\", sep = \"\"), las=1, mgp=c(2,1,0))\n}\n\nplotGroupByNameColor(unique(c(resultMutTcga$genesSignif[[3]]$fdr)), sub.matrix)\n\npdf('figures/tcga-mutex-new.pdf', width = 10, height = 8)\npar(mfrow=c(2,3))\ninvisible(sapply(1:nrow(resultMutTcga$genesSignif[[3]]$fdr), function(id, data) {\n    plotGroupByNameColor(data$genesSignif[[3]]$fdr[id,],\n                         sub.matrix,\n                         paste0(\"p=\",format(data$pvals[[3]]$fdr[id], scientific = TRUE, digits = 1))\n    )\n}, resultMutTcga))\ndev.off()\npar(mfrow=c(1,1))\n\n#plotGroupByNameColor(resultMutTcga$genesSignif[[3]]$fdr[1,], sub.matrix, 'TCGA')\n#plotGroupByNameColor(resultMutTcga$genesSignif[[3]]$fdr[2,], sub.matrix, 'TCGA')\n#plotGroupByNameColor(resultMutTcga$genesSignif[[3]]$fdr[3,], sub.matrix, 'TCGA')\n#plotGroupByNameColor(c(\"CTNNB1\",\"AXIN1\",\"RB1\"), sub.matrix, \"TCGA\")\n\n########################\n# Identify groups of genes in the same pathway\n\nlibrary(KEGGREST)\n\nlibrary(limma)\n\npathway.by.gene <- function(genes) {\n    genes <- alias2Symbol(genes)\n    entrez <- select(x = org.Hs.eg.db, keys = genes, columns = \"ENTREZID\", keytype = \"SYMBOL\")[,2]\n    entrez.hsa <- paste(\"hsa\", entrez, sep = \":\")\n    pathways <- keggLink(\"pathway\", entrez.hsa)\n    return(pathways)\n}\n\npathways <- apply(resultMutTcga$genesSignif[[3]]$fdr, 1, pathway.by.gene)\n# Which gene group has pathways in common\npathway.in.common <- sapply(sapply(pathways, function(x){x[duplicated(x)]}), length) > 0\n#pathway.in.common <- sapply(sapply(pathways, function(x) unique(names(x))), length) > 0\n\npdf(\"figures/gene-groups-with-common-pathways.pdf\", width = 15, height = 8)\npar(mfrow=c(1,sum(pathway.in.common)))\ninvisible(apply(resultMutTcga$genesSignif[[3]]$fdr[pathway.in.common,], 1, function(x) {plotGroupByNameColor(x, sub.matrix, \"\")}))\ndev.off()\n\n# Map pathway ID to pathway name\nkegg.pathways <- keggList(\"pathway\", \"hsa\")\nshared.pathways <- sapply(pathways[pathway.in.common], function(x)x[duplicated(x)])\nshared.pathways.name <- sapply(shared.pathways, function(x, kegg.pathways) kegg.pathways[x], kegg.pathways)\n\n########################\n## Run this part on the server\n##\n# Expression analysis\n# library('DESeq2')\n# library(\"BiocParallel\")\n# register(MulticoreParam(3))\n#\n# expr <- read.table('expression/LIHC.uncv2.mRNAseq_raw_counts.txt', sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE)\n# colnames(expr) <- gsub(\"\\\\.\", \"-\", colnames(expr))\n# expr <- expr[,grep(\"01$\", colnames(expr))]\n# colnames(expr) <- sapply(colnames(expr), function(x)substr(x, 1, 12))\n# intersect.samples <- intersect(colnames(expr), rownames(sub.matrix))\n# expr.sub <- expr[,intersect.samples]\n#\n# mutated <- rowSums(sub.matrix[intersect.samples,c(\"CTNNB1\",\"AXIN1\",\"RB1\")]) > 0\n#\n# colData <- data.frame(sample = intersect.samples, group = mutated)\n# # Prepare count data for DESeq2\n# expr.sub.mat <- sapply(matrix(expr.sub), as.integer)\n# dds <- DESeqDataSetFromMatrix(expr.sub.mat, colData, design = ~ group)\n# dds <- DESeq(dds, parallel = TRUE)\n# dds$condition <- factor(c(\"wt\",\"mut\")[1*mutated+1])\n# dds_res <- results(dds, addMLE = TRUE, parallel = TRUE, contrast = c(\"condition\", \"wt\", \"mut\"))\n# dds_res <- dds_res[order(dds_res$padj),]\n# dds_resFilt <- dds_res[which(dds_res$padj < 0.05),]\n\n\nload('deseq2-result.Rdata')\n#rm(colData, data, expr, expr.sub, expr.sub.mat, first_time, intersect.samples, matrix, mutated, mutation.freq, patients, resultMutTcga, sub.matrix,genes)\n\nrnk.file <- function(dds.res, genes) { # Rank genes by p-value\n    rnk <- data.frame(cbind(rownames(dds.res), dds.res$padj),stringsAsFactors = FALSE)\n    colnames(rnk) <- c(\"gene\",\"fdr\")\n    rnk$gene <- sapply(rnk$gene, function(x) strsplit(x, \"\\\\|\")[[1]][1])\n    rnk$fdr[is.na(rnk$fdr)] <- 1\n    rnk <- rnk[rnk$gene != \"?\",]\n    rnk <- rnk[!duplicated(rnk$gene),]\n    rnk$fdr <- -10*log(as.numeric(rnk$fdr))\n    write.table(rnk, paste(paste(genes, collapse = \"-\"), \".rnk\", sep = \"\"), sep = \"\\t\", row.names = FALSE, col.names = FALSE, quote = FALSE)\n}\nif (FALSE) {\n# rnk.file.fc <- function(dds.res) {\n#     rnk <- data.frame(cbind(rownames(dds.res), abs(dds.res$log2FoldChange)), stringsAsFactors = FALSE)\n#     colnames(rnk) <- c(\"gene\",\"fc\")\n#     rnk$gene <- sapply(rnk$gene, function(x) strsplit(x, \"\\\\|\")[[1]][1])\n#     rnk <- rnk[rnk$gene != \"?\",]\n#     rnk <- rnk[!duplicated(rnk$gene),]\n#     rnk$fc[is.na(rnk$fc)] <- 0\n#     rnk <- rnk[order(rnk$fc),]\n#     write.table(rnk, \"CTNNB1-AXIN1-RB1-fc.rnk\", sep = \"\\t\", row.names = FALSE, col.names = FALSE, quote = FALSE)\n# }\n} # Rank genes by fold change\n\nrnk.file(dds.result[[1]], resultMutTcga$genesSignif[[3]]$fdr[1,])\nrnk.file(dds.result[[2]], resultMutTcga$genesSignif[[3]]$fdr[2,])\nrnk.file(dds.result[[3]], resultMutTcga$genesSignif[[3]]$fdr[3,])\n",
    "created" : 1493113907990.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2540039368",
    "id" : "78185C56",
    "lastKnownWriteTime" : 1493735017,
    "last_content_update" : 1493735017368,
    "path" : "~/polybox/Students/Natalie/thomas/code.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}